<?php
/**
 * Share.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ShareModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var array
     */
    protected $moduleVars;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface $translator  Translator service instance
     * @param object              $moduleVars  Existing module vars
     */
    public function __construct(
        TranslatorInterface $translator,
        $moduleVars
    ) {
        $this->setTranslator($translator);
        $this->moduleVars = $moduleVars;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addIntegrationFields($builder, $options);
        $this->addGeoFields($builder, $options);

        $builder
            ->add('save', SubmitType::class, [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for general fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeneralFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('zicCode', TextType::class, [
                'label' => $this->__('Zic code') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['zicCode']) ? $this->moduleVars['zicCode'] : '',
                'empty_data' => '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the zic code.')
                ],
            ])
            ->add('city', TextType::class, [
                'label' => $this->__('City') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['city']) ? $this->moduleVars['city'] : '',
                'empty_data' => '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the city.')
                ],
            ])
            ->add('state', TextType::class, [
                'label' => $this->__('State') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['state']) ? $this->moduleVars['state'] : '',
                'empty_data' => '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the state.')
                ],
            ])
            ->add('allowedPictures', IntegerType::class, [
                'label' => $this->__('Allowed pictures') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['allowedPictures']) ? intval($this->moduleVars['allowedPictures']) : intval(5),
                'empty_data' => intval('5'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the allowed pictures.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('offersPerPage', IntegerType::class, [
                'label' => $this->__('Offers per page') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['offersPerPage']) ? intval($this->moduleVars['offersPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the offers per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('locationEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Location entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of locations shown per page')
                ],
                'help' => $this->__('The amount of locations shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['locationEntriesPerPage']) ? intval($this->moduleVars['locationEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the location entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnLocationsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own locations on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to locations of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to locations of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnLocationsOnAccountPage']) ? $this->moduleVars['linkOwnLocationsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own locations on account page option.')
                ],
            ])
            ->add('offerEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Offer entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of offers shown per page')
                ],
                'help' => $this->__('The amount of offers shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['offerEntriesPerPage']) ? intval($this->moduleVars['offerEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the offer entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnOffersOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own offers on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to offers of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to offers of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnOffersOnAccountPage']) ? $this->moduleVars['linkOwnOffersOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own offers on account page option.')
                ],
            ])
            ->add('poolEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Pool entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of pools shown per page')
                ],
                'help' => $this->__('The amount of pools shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['poolEntriesPerPage']) ? intval($this->moduleVars['poolEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the pool entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnPoolsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own pools on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to pools of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to pools of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnPoolsOnAccountPage']) ? $this->moduleVars['linkOwnPoolsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own pools on account page option.')
                ],
            ])
            ->add('companyEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Company entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of companies shown per page')
                ],
                'help' => $this->__('The amount of companies shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['companyEntriesPerPage']) ? intval($this->moduleVars['companyEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the company entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnCompaniesOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own companies on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to companies of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to companies of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnCompaniesOnAccountPage']) ? $this->moduleVars['linkOwnCompaniesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own companies on account page option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enabledFinderTypes', ChoiceType::class, [
                'label' => $this->__('Enabled finder types') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
                ],
                'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
                'data' => isset($this->moduleVars['enabledFinderTypes']) ? $this->moduleVars['enabledFinderTypes'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the enabled finder types.')
                ],'choices' => [
                    $this->__('Location') => 'location',
                    $this->__('Offer') => 'offer',
                    $this->__('Pool') => 'pool',
                    $this->__('Company') => 'company'
                ],
                'choices_as_values' => true,
                'multiple' => true
            ])
        ;
    }

    /**
     * Adds fields for geo fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeoFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('defaultLatitude', TextType::class, [
                'label' => $this->__('Default latitude') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The default latitude.')
                ],
                'help' => $this->__('The default latitude.'),
                'required' => false,
                'data' => isset($this->moduleVars['defaultLatitude']) ? $this->moduleVars['defaultLatitude'] : '',
                'empty_data' => '0.00',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the default latitude.')
                ],
            ])
            ->add('defaultLongitude', TextType::class, [
                'label' => $this->__('Default longitude') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The default longitude.')
                ],
                'help' => $this->__('The default longitude.'),
                'required' => false,
                'data' => isset($this->moduleVars['defaultLongitude']) ? $this->moduleVars['defaultLongitude'] : '',
                'empty_data' => '0.00',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the default longitude.')
                ],
            ])
            ->add('defaultZoomLevel', IntegerType::class, [
                'label' => $this->__('Default zoom level') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The default zoom level.')
                ],
                'help' => $this->__('The default zoom level.'),
                'required' => false,
                'data' => isset($this->moduleVars['defaultZoomLevel']) ? intval($this->moduleVars['defaultZoomLevel']) : intval(5),
                'empty_data' => intval('5'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the default zoom level.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('tileLayerUrl', TextType::class, [
                'label' => $this->__('Tile layer url') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('URL of tile layer to use. See http://leaflet-extras.github.io/leaflet-providers/preview/ for examples.')
                ],
                'help' => $this->__('URL of tile layer to use. See http://leaflet-extras.github.io/leaflet-providers/preview/ for examples.'),
                'required' => false,
                'data' => isset($this->moduleVars['tileLayerUrl']) ? $this->moduleVars['tileLayerUrl'] : '',
                'empty_data' => 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the tile layer url.')
                ],
            ])
            ->add('tileLayerAttribution', TextType::class, [
                'label' => $this->__('Tile layer attribution') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Attribution for tile layer to use.')
                ],
                'help' => $this->__('Attribution for tile layer to use.'),
                'required' => false,
                'data' => isset($this->moduleVars['tileLayerAttribution']) ? $this->moduleVars['tileLayerAttribution'] : '',
                'empty_data' => '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the tile layer attribution.')
                ],
            ])
            ->add('enableLocationGeoLocation', CheckboxType::class, [
                'label' => $this->__('Enable location geo location') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable geo location functionality for locations or not.')
                ],
                'help' => $this->__('Whether to enable geo location functionality for locations or not.'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['enableLocationGeoLocation']) ? $this->moduleVars['enableLocationGeoLocation'] : false),
                'attr' => [
                    'title' => $this->__('The enable location geo location option.')
                ],
            ])
            ->add('enableOfferGeoLocation', CheckboxType::class, [
                'label' => $this->__('Enable offer geo location') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable geo location functionality for offers or not.')
                ],
                'help' => $this->__('Whether to enable geo location functionality for offers or not.'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['enableOfferGeoLocation']) ? $this->moduleVars['enableOfferGeoLocation'] : false),
                'attr' => [
                    'title' => $this->__('The enable offer geo location option.')
                ],
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'musharemodule_config';
    }
}
