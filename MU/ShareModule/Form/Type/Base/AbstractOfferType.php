<?php
/**
 * Share.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ShareModule\Form\Type\Base;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\CategoriesModule\Form\Type\CategoriesType;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\ShareModule\Entity\Factory\EntityFactory;
use MU\ShareModule\Form\Type\Field\GeoType;
use Zikula\UsersModule\Form\Type\UserLiveSearchType;
use MU\ShareModule\Helper\CollectionFilterHelper;
use MU\ShareModule\Helper\EntityDisplayHelper;
use MU\ShareModule\Helper\FeatureActivationHelper;
use MU\ShareModule\Helper\ListEntriesHelper;

/**
 * Offer editing form type base class.
 */
abstract class AbstractOfferType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var CollectionFilterHelper
     */
    protected $collectionFilterHelper;

    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    /**
     * OfferType constructor.
     *
     * @param TranslatorInterface $translator    Translator service instance
     * @param EntityFactory $entityFactory EntityFactory service instance
     * @param CollectionFilterHelper $collectionFilterHelper CollectionFilterHelper service instance
     * @param EntityDisplayHelper $entityDisplayHelper EntityDisplayHelper service instance
     * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
     * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
        CollectionFilterHelper $collectionFilterHelper,
        EntityDisplayHelper $entityDisplayHelper,
        ListEntriesHelper $listHelper,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->collectionFilterHelper = $collectionFilterHelper;
        $this->entityDisplayHelper = $entityDisplayHelper;
        $this->listHelper = $listHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, 'offer')) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addIncomingRelationshipFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options)
    {
        
        $builder->add('product', TextType::class, [
            'label' => $this->__('Product') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the product of the offer')
            ],
            'required' => true,
        ]);
        
        $builder->add('description', TextareaType::class, [
            'label' => $this->__('Description') . ':',
            'help' => $this->__f('Note: this value must not exceed %amount% characters.', ['%amount%' => 4000]),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 4000,
                'class' => '',
                'title' => $this->__('Enter the description of the offer')
            ],
            'required' => false,
        ]);
        
        $builder->add('isOpen', CheckboxType::class, [
            'label' => $this->__('Is open') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Is your offer active?')
            ],
            'help' => $this->__('Is your offer active?'),
            'attr' => [
                'class' => '',
                'title' => $this->__('is open ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('abo', CheckboxType::class, [
            'label' => $this->__('Abo') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('abo ?')
            ],
            'required' => false,
        ]);
        
        $listEntries = $this->listHelper->getEntries('offer', 'period');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('period', ChoiceType::class, [
            'label' => $this->__('Period') . ':',
            'empty_data' => 'not set',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the period')
            ],
            'required' => false,
            'placeholder' => $this->__('Choose an option'),
            'choices' => $choices,
            'choices_as_values' => true,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('totalYear', CheckboxType::class, [
            'label' => $this->__('Total year') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('total year ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('splitCosts', CheckboxType::class, [
            'label' => $this->__('Split costs') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('split costs ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('back', CheckboxType::class, [
            'label' => $this->__('Back') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Do you want back your offer after sharing?')
            ],
            'help' => $this->__('Do you want back your offer after sharing?'),
            'attr' => [
                'class' => '',
                'title' => $this->__('back ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('atMe', CheckboxType::class, [
            'label' => $this->__('At me') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Is the meeting place at you?')
            ],
            'help' => $this->__('Is the meeting place at you?'),
            'attr' => [
                'class' => '',
                'title' => $this->__('at me ?')
            ],
            'required' => false,
        ]);
        
        $builder->add('zipCode', TextType::class, [
            'label' => $this->__('Zip code') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter the zip code for the meeting place!')
            ],
            'help' => $this->__('Enter the zip code for the meeting place!'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the zip code of the offer')
            ],
            'required' => false,
        ]);
        
        $builder->add('meetingPlace', TextType::class, [
            'label' => $this->__('Meeting place') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Enter the street (and number) for the meeting lce')
            ],
            'help' => $this->__('Enter the street (and number) for the meeting lce'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the meeting place of the offer')
            ],
            'required' => false,
        ]);
        $this->addGeographicalFields($builder, $options);
    }

    /**
     * Adds fields for coordinates.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeographicalFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('latitude', GeoType::class, [
            'label' => $this->__('Latitude') . ':',
            'required' => false
        ]);
        $builder->add('longitude', GeoType::class, [
            'label' => $this->__('Longitude') . ':',
            'required' => false
        ]);
    }

    /**
     * Adds a categories field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options)
    {
        $builder->add('categories', CategoriesType::class, [
            'label' => $this->__('Categories') . ':',
            'empty_data' => [],
            'attr' => [
                'class' => 'category-selector'
            ],
            'required' => false,
            'multiple' => true,
            'module' => 'MUShareModule',
            'entity' => 'OfferEntity',
            'entityCategoryClass' => 'MU\ShareModule\Entity\OfferCategoryEntity'
        ]);
    }

    /**
     * Adds fields for incoming relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIncomingRelationshipFields(FormBuilderInterface $builder, array $options)
    {
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('locationOfOffer', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUShareModule:LocationEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => false,
            'expanded' => false,
            'query_builder' => $queryBuilder,
            'placeholder' => $this->__('Please choose an option'),
            'required' => false,
            'label' => $this->__('Location of offer'),
            'attr' => [
                'title' => $this->__('Choose the location of offer')
            ]
        ]);
    }

    /**
     * Adds special fields for moderators.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        if (!$options['has_moderate_permission']) {
            return;
        }
        if ($options['inline_usage']) {
            return;
        }
    
        $builder->add('moderationSpecificCreator', UserLiveSearchType::class, [
            'mapped' => false,
            'label' => $this->__('Creator') . ':',
            'attr' => [
                'maxlength' => 11,
                'title' => $this->__('Here you can choose a user which will be set as creator')
            ],
            'empty_data' => 0,
            'required' => false,
            'help' => $this->__('Here you can choose a user which will be set as creator')
        ]);
        $builder->add('moderationSpecificCreationDate', DateTimeType::class, [
            'mapped' => false,
            'label' => $this->__('Creation date') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('Here you can choose a custom creation date')
            ],
            'empty_data' => '',
            'required' => false,
            'with_seconds' => true,
            'date_widget' => 'single_text',
            'time_widget' => 'single_text',
            'help' => $this->__('Here you can choose a custom creation date')
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], SubmitType::class, [
                'label' => $action['title'],
                'icon' => ($action['id'] == 'delete' ? 'fa-trash-o' : ''),
                'attr' => [
                    'class' => $action['buttonClass']
                ]
            ]);
            if ($options['mode'] == 'create' && $action['id'] == 'submit' && !$options['inline_usage']) {
                // add additional button to submit item and return to create form
                $builder->add('submitrepeat', SubmitType::class, [
                    'label' => $this->__('Submit and repeat'),
                    'icon' => 'fa-repeat',
                    'attr' => [
                        'class' => $action['buttonClass']
                    ]
                ]);
            }
        }
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'musharemodule_offer';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => 'MU\ShareModule\Entity\OfferEntity',
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createOffer();
                },
                'error_mapping' => [
                ],
                'mode' => 'create',
                'actions' => [],
                'has_moderate_permission' => false,
                'filter_by_ownership' => true,
                'inline_usage' => false
            ])
            ->setRequired(['mode', 'actions'])
            ->setAllowedTypes('mode', 'string')
            ->setAllowedTypes('actions', 'array')
            ->setAllowedTypes('has_moderate_permission', 'bool')
            ->setAllowedTypes('filter_by_ownership', 'bool')
            ->setAllowedTypes('inline_usage', 'bool')
            ->setAllowedValues('mode', ['create', 'edit'])
        ;
    }
}
