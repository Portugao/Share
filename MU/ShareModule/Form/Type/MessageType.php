<?php
/**
 * Share.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ShareModule\Form\Type;

use MU\ShareModule\Form\Type\Base\AbstractMessageType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use MU\ShareModule\Entity\Factory\EntityFactory;
use MU\ShareModule\Helper\FeatureActivationHelper;
use MU\ShareModule\Helper\ListEntriesHelper;

use Zikula\UsersModule\Entity\RepositoryInterface\UserRepositoryInterface;
use MU\ShareModule\Form\DataTransformer\StringObjectTransformer;

/**
 * Message editing form type implementation class.
 */
class MessageType extends AbstractMessageType
{
	/**
	 * @var UserRepositoryInterface
	 */
	protected $userRepository;
	
	/**
	 * @var StringObjectTransformer
	 */
	protected $stringObjectTransformer;
	
	
	
	/**
	 * MessageType constructor.
	 *
	 * @param TranslatorInterface $translator    Translator service instance
	 * @param EntityFactory $entityFactory EntityFactory service instance
	 * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
	 * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
	 * @param StringObjectTransformer $stringObjectTransformer StringObjectTransformer service instance
	 */
	public function __construct(
			TranslatorInterface $translator,
			EntityFactory $entityFactory,
			ListEntriesHelper $listHelper,
			FeatureActivationHelper $featureActivationHelper,
			StringObjectTransformer $stringObjectTransformer
			
			) {
				$this->setTranslator($translator);
				$this->entityFactory = $entityFactory;
				$this->listHelper = $listHelper;
				$this->featureActivationHelper = $featureActivationHelper;
				$this->stringObjectTransformer = $stringObjectTransformer;
	}
	
    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        parent::buildForm($builder, $options);
        $builder->add('recipient', HiddenType::class);

        $builder->get('recipient')->addModelTransformer($this->stringObjectTransformer);
    }
}
