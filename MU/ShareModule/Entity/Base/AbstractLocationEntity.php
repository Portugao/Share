<?php
/**
 * Share.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ShareModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\ShareModule\Traits\GeographicalTrait;
use MU\ShareModule\Traits\StandardFieldsTrait;
use MU\ShareModule\Validator\Constraints as ShareAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for location entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractLocationEntity extends EntityAccess
{
    /**
     * Hook geographical behaviour embedding latitude and longitude fields.
     */
    use GeographicalTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'location';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @ShareAssert\ListEntry(entityName="location", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * Enter a title for better management of your locations.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $street
     */
    protected $street = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $numberOfStreet
     */
    protected $numberOfStreet = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $zipCode
     */
    protected $zipCode = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $city
     */
    protected $city = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $forMap
     */
    protected $forMap = true;
    
    /**
     * Enter the radius for displaying offers.
     Standard value is 1000.
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThanOrEqual(value=5000)
     * @var integer $radius
     */
    protected $radius = 1000;
    
    /**
     * Here you can enter additional zip codes. If you choose the relevant search option, papershare will also use them, to find offers.
     Enter them comaseperated like (28203,28205,28207) without space.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $zipCodes
     */
    protected $zipCodes = '';
    
    /**
     * Possoible options:
     - Standard: Papershare is looking for offers with the same city name or the same zip code of your location or zipcode is in additional zip codes.
     - City name: only looking for offers with the same city name like your location.
     - Zip codes: Papershare is looking for offers with the same zip code like your location and additional zip codes
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @ShareAssert\ListEntry(entityName="location", propertyName="searchOptions", multiple=false)
     * @var string $searchOptions
     */
    protected $searchOptions = '';
    
    /**
     * If you set private to active, you say, that it is not a location, you are the owner from; for example a restaurant.
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $private
     */
    protected $private = false;
    
    /**
     * Enter the name of your company.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * Here you can enter more informations about the company.
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Mail of the company.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $mail
     */
    protected $mail = '';
    
    /**
     * Homepage of your company.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\Url(checkDNS=false)
     * @var string $website
     */
    protected $website = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $phone
     */
    protected $phone = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $mobile
     */
    protected $mobile = '';
    
    
    /**
     * Bidirectional - One locationOfOffer [location] has many offerOfLocation [offers] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\ShareModule\Entity\OfferEntity", mappedBy="locationOfOffer")
     * @ORM\JoinTable(name="mu_share_locationofofferofferoflocation",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , nullable=false)}
     * )
     * @Assert\NotNull(message="Choosing at least one of the offer of location is required.")
     * @var \MU\ShareModule\Entity\OfferEntity[] $offerOfLocation
     */
    protected $offerOfLocation = null;
    
    
    /**
     * LocationEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->offerOfLocation = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the street.
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->street;
    }
    
    /**
     * Sets the street.
     *
     * @param string $street
     *
     * @return void
     */
    public function setStreet($street)
    {
        if ($this->street !== $street) {
            $this->street = isset($street) ? $street : '';
        }
    }
    
    /**
     * Returns the number of street.
     *
     * @return string
     */
    public function getNumberOfStreet()
    {
        return $this->numberOfStreet;
    }
    
    /**
     * Sets the number of street.
     *
     * @param string $numberOfStreet
     *
     * @return void
     */
    public function setNumberOfStreet($numberOfStreet)
    {
        if ($this->numberOfStreet !== $numberOfStreet) {
            $this->numberOfStreet = isset($numberOfStreet) ? $numberOfStreet : '';
        }
    }
    
    /**
     * Returns the zip code.
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->zipCode;
    }
    
    /**
     * Sets the zip code.
     *
     * @param string $zipCode
     *
     * @return void
     */
    public function setZipCode($zipCode)
    {
        if ($this->zipCode !== $zipCode) {
            $this->zipCode = isset($zipCode) ? $zipCode : '';
        }
    }
    
    /**
     * Returns the city.
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
    
    /**
     * Sets the city.
     *
     * @param string $city
     *
     * @return void
     */
    public function setCity($city)
    {
        if ($this->city !== $city) {
            $this->city = isset($city) ? $city : '';
        }
    }
    
    /**
     * Returns the for map.
     *
     * @return boolean
     */
    public function getForMap()
    {
        return $this->forMap;
    }
    
    /**
     * Sets the for map.
     *
     * @param boolean $forMap
     *
     * @return void
     */
    public function setForMap($forMap)
    {
        if (boolval($this->forMap) !== boolval($forMap)) {
            $this->forMap = boolval($forMap);
        }
    }
    
    /**
     * Returns the radius.
     *
     * @return integer
     */
    public function getRadius()
    {
        return $this->radius;
    }
    
    /**
     * Sets the radius.
     *
     * @param integer $radius
     *
     * @return void
     */
    public function setRadius($radius)
    {
        if (intval($this->radius) !== intval($radius)) {
            $this->radius = intval($radius);
        }
    }
    
    /**
     * Returns the zip codes.
     *
     * @return string
     */
    public function getZipCodes()
    {
        return $this->zipCodes;
    }
    
    /**
     * Sets the zip codes.
     *
     * @param string $zipCodes
     *
     * @return void
     */
    public function setZipCodes($zipCodes)
    {
        if ($this->zipCodes !== $zipCodes) {
            $this->zipCodes = isset($zipCodes) ? $zipCodes : '';
        }
    }
    
    /**
     * Returns the search options.
     *
     * @return string
     */
    public function getSearchOptions()
    {
        return $this->searchOptions;
    }
    
    /**
     * Sets the search options.
     *
     * @param string $searchOptions
     *
     * @return void
     */
    public function setSearchOptions($searchOptions)
    {
        if ($this->searchOptions !== $searchOptions) {
            $this->searchOptions = isset($searchOptions) ? $searchOptions : '';
        }
    }
    
    /**
     * Returns the private.
     *
     * @return boolean
     */
    public function getPrivate()
    {
        return $this->private;
    }
    
    /**
     * Sets the private.
     *
     * @param boolean $private
     *
     * @return void
     */
    public function setPrivate($private)
    {
        if (boolval($this->private) !== boolval($private)) {
            $this->private = boolval($private);
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the mail.
     *
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }
    
    /**
     * Sets the mail.
     *
     * @param string $mail
     *
     * @return void
     */
    public function setMail($mail)
    {
        if ($this->mail !== $mail) {
            $this->mail = isset($mail) ? $mail : '';
        }
    }
    
    /**
     * Returns the website.
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }
    
    /**
     * Sets the website.
     *
     * @param string $website
     *
     * @return void
     */
    public function setWebsite($website)
    {
        if ($this->website !== $website) {
            $this->website = isset($website) ? $website : '';
        }
    }
    
    /**
     * Returns the phone.
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
    
    /**
     * Sets the phone.
     *
     * @param string $phone
     *
     * @return void
     */
    public function setPhone($phone)
    {
        if ($this->phone !== $phone) {
            $this->phone = isset($phone) ? $phone : '';
        }
    }
    
    /**
     * Returns the mobile.
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->mobile;
    }
    
    /**
     * Sets the mobile.
     *
     * @param string $mobile
     *
     * @return void
     */
    public function setMobile($mobile)
    {
        if ($this->mobile !== $mobile) {
            $this->mobile = isset($mobile) ? $mobile : '';
        }
    }
    
    
    /**
     * Returns the offer of location.
     *
     * @return \MU\ShareModule\Entity\OfferEntity[]
     */
    public function getOfferOfLocation()
    {
        return $this->offerOfLocation;
    }
    
    /**
     * Sets the offer of location.
     *
     * @param \MU\ShareModule\Entity\OfferEntity[] $offerOfLocation
     *
     * @return void
     */
    public function setOfferOfLocation($offerOfLocation)
    {
        foreach ($this->offerOfLocation as $offerSingle) {
            $this->removeOfferOfLocation($offerSingle);
        }
        foreach ($offerOfLocation as $offerSingle) {
            $this->addOfferOfLocation($offerSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\ShareModule\Entity\OfferEntity to the list of offer of location.
     *
     * @param \MU\ShareModule\Entity\OfferEntity $offer The instance to be added to the collection
     *
     * @return void
     */
    public function addOfferOfLocation(\MU\ShareModule\Entity\OfferEntity $offer)
    {
        $this->offerOfLocation->add($offer);
        $offer->setLocationOfOffer($this);
    }
    
    /**
     * Removes an instance of \MU\ShareModule\Entity\OfferEntity from the list of offer of location.
     *
     * @param \MU\ShareModule\Entity\OfferEntity $offer The instance to be removed from the collection
     *
     * @return void
     */
    public function removeOfferOfLocation(\MU\ShareModule\Entity\OfferEntity $offer)
    {
        $this->offerOfLocation->removeElement($offer);
        $offer->setLocationOfOffer(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'musharemodule.ui_hooks.locations';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Location ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
