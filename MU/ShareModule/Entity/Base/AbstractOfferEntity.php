<?php
/**
 * Share.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ShareModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\ShareModule\Traits\GeographicalTrait;
use MU\ShareModule\Traits\StandardFieldsTrait;
use MU\ShareModule\Validator\Constraints as ShareAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for offer entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractOfferEntity extends EntityAccess
{
    /**
     * Hook geographical behaviour embedding latitude and longitude fields.
     */
    use GeographicalTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'offer';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @ShareAssert\ListEntry(entityName="offer", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $product
     */
    protected $product = '';
    
    /**
     * @ORM\Column(type="text", length=4000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="4000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Is your offer active?
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $isOpen
     */
    protected $isOpen = true;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $abo
     */
    protected $abo = false;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @ShareAssert\ListEntry(entityName="offer", propertyName="period", multiple=false)
     * @var string $period
     */
    protected $period = 'not set';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $totalYear
     */
    protected $totalYear = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $splitCosts
     */
    protected $splitCosts = false;
    
    /**
     * Do you want back your offer after sharing?
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $back
     */
    protected $back = false;
    
    /**
     * Is the meeting place at you?
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $atMe
     */
    protected $atMe = false;
    
    /**
     * Enter the zip code for the meeting place!
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $zipCode
     */
    protected $zipCode = '';
    
    /**
     * Enter the street (and number) for the meeting lce
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $meetingPlace
     */
    protected $meetingPlace = '';
    
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\ShareModule\Entity\OfferCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \MU\ShareModule\Entity\OfferCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - Many offerOfLocation [offers] are linked by one locationOfOffer [location] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\ShareModule\Entity\LocationEntity", inversedBy="offerOfLocation")
     * @ORM\JoinTable(name="mu_share_location")
     * @Assert\Type(type="MU\ShareModule\Entity\LocationEntity")
     * @var \MU\ShareModule\Entity\LocationEntity $locationOfOffer
     */
    protected $locationOfOffer;
    
    
    /**
     * OfferEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the product.
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->product;
    }
    
    /**
     * Sets the product.
     *
     * @param string $product
     *
     * @return void
     */
    public function setProduct($product)
    {
        if ($this->product !== $product) {
            $this->product = isset($product) ? $product : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the is open.
     *
     * @return boolean
     */
    public function getIsOpen()
    {
        return $this->isOpen;
    }
    
    /**
     * Sets the is open.
     *
     * @param boolean $isOpen
     *
     * @return void
     */
    public function setIsOpen($isOpen)
    {
        if (boolval($this->isOpen) !== boolval($isOpen)) {
            $this->isOpen = boolval($isOpen);
        }
    }
    
    /**
     * Returns the abo.
     *
     * @return boolean
     */
    public function getAbo()
    {
        return $this->abo;
    }
    
    /**
     * Sets the abo.
     *
     * @param boolean $abo
     *
     * @return void
     */
    public function setAbo($abo)
    {
        if (boolval($this->abo) !== boolval($abo)) {
            $this->abo = boolval($abo);
        }
    }
    
    /**
     * Returns the period.
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->period;
    }
    
    /**
     * Sets the period.
     *
     * @param string $period
     *
     * @return void
     */
    public function setPeriod($period)
    {
        if ($this->period !== $period) {
            $this->period = isset($period) ? $period : '';
        }
    }
    
    /**
     * Returns the total year.
     *
     * @return boolean
     */
    public function getTotalYear()
    {
        return $this->totalYear;
    }
    
    /**
     * Sets the total year.
     *
     * @param boolean $totalYear
     *
     * @return void
     */
    public function setTotalYear($totalYear)
    {
        if (boolval($this->totalYear) !== boolval($totalYear)) {
            $this->totalYear = boolval($totalYear);
        }
    }
    
    /**
     * Returns the split costs.
     *
     * @return boolean
     */
    public function getSplitCosts()
    {
        return $this->splitCosts;
    }
    
    /**
     * Sets the split costs.
     *
     * @param boolean $splitCosts
     *
     * @return void
     */
    public function setSplitCosts($splitCosts)
    {
        if (boolval($this->splitCosts) !== boolval($splitCosts)) {
            $this->splitCosts = boolval($splitCosts);
        }
    }
    
    /**
     * Returns the back.
     *
     * @return boolean
     */
    public function getBack()
    {
        return $this->back;
    }
    
    /**
     * Sets the back.
     *
     * @param boolean $back
     *
     * @return void
     */
    public function setBack($back)
    {
        if (boolval($this->back) !== boolval($back)) {
            $this->back = boolval($back);
        }
    }
    
    /**
     * Returns the at me.
     *
     * @return boolean
     */
    public function getAtMe()
    {
        return $this->atMe;
    }
    
    /**
     * Sets the at me.
     *
     * @param boolean $atMe
     *
     * @return void
     */
    public function setAtMe($atMe)
    {
        if (boolval($this->atMe) !== boolval($atMe)) {
            $this->atMe = boolval($atMe);
        }
    }
    
    /**
     * Returns the zip code.
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->zipCode;
    }
    
    /**
     * Sets the zip code.
     *
     * @param string $zipCode
     *
     * @return void
     */
    public function setZipCode($zipCode)
    {
        if ($this->zipCode !== $zipCode) {
            $this->zipCode = isset($zipCode) ? $zipCode : '';
        }
    }
    
    /**
     * Returns the meeting place.
     *
     * @return string
     */
    public function getMeetingPlace()
    {
        return $this->meetingPlace;
    }
    
    /**
     * Sets the meeting place.
     *
     * @param string $meetingPlace
     *
     * @return void
     */
    public function setMeetingPlace($meetingPlace)
    {
        if ($this->meetingPlace !== $meetingPlace) {
            $this->meetingPlace = isset($meetingPlace) ? $meetingPlace : '';
        }
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection
     * @param \MU\ShareModule\Entity\OfferCategoryEntity $element
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \MU\ShareModule\Entity\OfferCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\ShareModule\Entity\OfferCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the location of offer.
     *
     * @return \MU\ShareModule\Entity\LocationEntity
     */
    public function getLocationOfOffer()
    {
        return $this->locationOfOffer;
    }
    
    /**
     * Sets the location of offer.
     *
     * @param \MU\ShareModule\Entity\LocationEntity $locationOfOffer
     *
     * @return void
     */
    public function setLocationOfOffer($locationOfOffer = null)
    {
        $this->locationOfOffer = $locationOfOffer;
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'musharemodule.ui_hooks.offers';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Offer ' . $this->getKey() . ': ' . $this->getProduct();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
